shader(type = vertex);

vec2 quad_positions[6] = vec2[](
	vec2(-1.0, -1.0), vec2(1.0, 1.0), vec2(1.0, -1.0),
	vec2(-1.0, -1.0), vec2(-1.0, 1.0), vec2(1.0, 1.0)
);

vec2 quad_texcoords[6] = vec2[](
	vec2(0.0, 1.0), vec2(1.0, 0.0), vec2(1.0, 1.0),
	vec2(0.0, 1.0), vec2(0.0, 0.0), vec2(1.0, 0.0)
);

struct ObjectInfo
{
	mat4 model;
	uint texture_id;
};

struct GameRenderInfo
{
	vec2 camera_pos;
	float camera_rot;
	mat4 view;
	mat4 projection;
};

resource(id = 0) buffer GameData
{
	GameRenderInfo info;
} game_data;

resource(id = 1) buffer ObjectData
{
	ObjectInfo info[];
} object_data;

output(id = 0) vec2 position;
output(id = 1) vec2 texcoord;
output(id = 2) uint texture_id;

void main()
{
	uint quad_id = in::vertex_id / 6;
	uint quad_vertex_id = in::vertex_id % 6;

	vec2 position_modelspace = quad_positions[quad_vertex_id];
	vec2 texcoord_modelspace = quad_texcoords[quad_vertex_id];
	ObjectInfo this_object_info = object_data.info[quad_id];

	mat4 model = this_object_info.model;
	mat4 mvp = game_data.info.projection * game_data.info.view * model;

	out::position = mvp * vec4(position_modelspace, 0.0, 1.0);
	position = position_modelspace;
	texcoord = texcoord_modelspace;
	texture_id = this_object_info.texture_id;
}
