shader(type = vertex);

struct TriangleVertexData
{
	vec3 position;
	vec2 texcoord;
	vec3 normal;
	vec3 tangent;
	vec3 bitangent;
	uint object_id;
};

struct ObjectInfo
{
	mat4 model;
	uint texture_id;
};

struct GameRenderInfo
{
	vec4 camera_pos;
	vec4 camera_rot;
	ObjectInfo object_data[72];
	mat4 view;
	mat4 projection;
};

resource(id = 0) buffer VertexData
{
	TriangleVertexData[] vertices;
} vertex_data;

resource(id = 1) buffer GameData
{
	GameRenderInfo info;
} game_data;

output(id = 0) vec3 position;
output(id = 1) vec2 texcoord;
output(id = 2) vec3 normal;
output(id = 3) vec3 tangent;
output(id = 4) vec3 bitangent;
output(id = 5) uint object_id;
output(id = 6) mat3 tbn_matrix;
output(id = 9) mat4 mv_matrix;
output(id = 13) mat4 view_matrix;

// go from camera space to tangent space
mat3 calculate_tbn_matrix(mat4 model_view)
{
	// We will work in camera space.
	vec3 normal_cameraspace = (model_view * vec4(normal, 0.0)).xyz;
	vec3 tangent_cameraspace = (model_view * vec4(tangent, 0.0)).xyz;
	// Gramm-schmidt
	tangent_cameraspace = normalize(tangent_cameraspace - dot(tangent_cameraspace, normal_cameraspace) * normal_cameraspace);

	vec3 bitangent_cameraspace = cross(tangent_cameraspace, normal_cameraspace);
	return transpose(mat3(tangent_cameraspace, bitangent_cameraspace, normal_cameraspace));
}

void main()
{
	TriangleVertexData vtx = vertex_data.vertices[tz_VertexID];

	ObjectInfo this_object_info = game_data.info.object_data[vtx.object_id];
	mat4 model = this_object_info.model;
	mat4 mvp = game_data.info.projection * game_data.info.view * model;

	position = vtx.position;
	gl_Position = mvp * vec4(position, 1.0);
	texcoord = vtx.texcoord;
	normal = vtx.normal;
	tangent = vtx.tangent;
	bitangent = vtx.bitangent;
	//object_id = vtx.object_id;
	object_id = this_object_info.texture_id;
	mat4 mv = game_data.info.view * model;
	tbn_matrix = calculate_tbn_matrix(mv);
	mv_matrix = mv;
	view_matrix = game_data.info.view;
}
