#pragma shader_stage(fragment)

resource(id = 2) const texture tex_sampler[3];
layout(location = 0) in vec3 position;
layout(location = 1) in vec2 texcoord;
layout(location = 2) in vec3 normal;
layout(location = 3) in vec3 tangent;
layout(location = 4) in vec3 bitangent;
layout(location = 5) flat in uint object_id;
layout(location = 6) in mat3 tbn_matrix;
layout(location = 9) in mat4 mv_matrix;
layout(location = 13) in mat4 view_matrix;

layout(location = 0) out vec4 output_colour;

const float parallax_multiplier = 0.03f;

vec3 get_light_direction_tangentspace()
{
	// We need the position in cameraspace.
	vec3 position_cameraspace = (mv_matrix * vec4(position, 1.0)).xyz;

	const vec3 light_direction_worldspace = vec3(1.0, 1.0, 1.0);
	vec3 light_direction_cameraspace = (view_matrix * vec4(light_direction_worldspace, 0.0)).xyz;
	return normalize(tbn_matrix * light_direction_cameraspace);
}

vec3 get_distance_from_fragment()
{
	// We need the position in cameraspace.
	vec3 position_cameraspace = (mv_matrix * vec4(position, 1.0)).xyz;

	const vec3 camera_pos_cameraspace = vec3(0.0);
	vec3 light_direction_cameraspace_unnormalised = camera_pos_cameraspace - position_cameraspace;
	return light_direction_cameraspace_unnormalised;
}

vec2 texcoord_offset(vec2 texcoord, uint parallax_texture_id)
{
	float height = texture(tex_sampler[parallax_texture_id], texcoord).r;
	vec3 view_dir = -normalize(get_distance_from_fragment());
	vec2 p = view_dir.xy / view_dir.z * (height * parallax_multiplier);
	return texcoord - p;
}

vec3 get_mapped_normal(vec2 texcoord, uint normal_texture_id)
{
	return texture(tex_sampler[normal_texture_id], texcoord).xyz * 255.0/128.0 - 1;
}

vec4 ambient(vec4 texture_colour)
{
	return texture_colour * vec4(0.1, 0.1, 0.1, 1.0);
}

vec4 diffuse(vec4 texture_colour, vec3 normal_tangentspace)
{
	vec3 light_direction_tangentspace = get_light_direction_tangentspace();
	float cos_theta = max(dot(normal_tangentspace, light_direction_tangentspace), 0.0);
	const vec4 light_colour = vec4(1.0, 1.0, 1.0, 1.0);
	float light_wattage = 0.3f;
	return texture_colour * light_colour * light_wattage * cos_theta;
}

void main()
{
	vec2 parallax_texcoord = texcoord_offset(texcoord, object_id + 6);
	vec3 mapped_normal_tangentspace = get_mapped_normal(parallax_texcoord, object_id + 3);
	vec4 texture_colour = texture(tex_sampler[object_id], parallax_texcoord);
	tz_printf("normal = {%.2v3f}", mapped_normal_tangentspace);

	// get the old normal in tangentspace.
	//vec3 old_normal_tangentspace = normalize(tbn_matrix * (mv_matrix * vec4(normal, 0.0)).xyz);
	output_colour = ambient(texture_colour) + diffuse(texture_colour, mapped_normal_tangentspace);
}
